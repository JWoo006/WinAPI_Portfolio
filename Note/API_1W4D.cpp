
#include <iostream>

// 질문 타임
// 포인터와 일반 값으로 데이터 관리의 차이
// 포인터는 new, malloc으로 동적할당 해주지 않는 이상 null값이 차지한다.
// 값형 -> vector<int> myVec; 은 해당 자료형 사이즈만큼 바로 할당됨

// vector의 reserve, resize
// reserve는 벡터안에 값을 넣지않고 전달받은 크기만큼 메모리를 할당해줌
// 벡터의 사이즈는 0이다.
// resize는 입력 받은 사이즈만큼 메모리 할당해주고 값을 넣어준다.

// 참조와 값복사 인자
// 얕은 복사, 깊은 복사

// static 키워드
// 자주 쓰는것들을 전역으로 
// Time(델타 타임), ScenenManager - 유니티
// 게임 구조를 생각해서 전역 설계
// 게임 내부 시간, 씬 로드 및 저장은 실행동안 메모리에 없어져서는 안됨

// 싱글톤 패턴
// 전역 객체(static)
// 전역 객체는 나중에 생성된 객체의 소멸자가 먼저 호출됨
// 소멸자 호출 순서(동적 할당 해제 순서)를 제어할수 없음

// 타임 프레임 띄우기

// 입력 INPUT
// 게임에서의 키 상태 3가지
// 1. Down
// 2. Press
// 3. Up
// 사용할 키의 개수 만큼 할당
// 반복문으로 순회하면서 각 키들의 상태를 체크

// 인벤토리 로직
// 아이템 드래그시 특정상황발생시 원래 위치로 갈때
// 키상태::up으로 원래 위치로 가게끔 설계

// inline 함수
// 함수를 타고들어가서 실행되지않고 함수 자체를 내용물로 치환해버림
// 최적화( 함수를 찾아가는 연산을 줄여줌)
// 컴파일러의 기준에 따라 인라인을 해줄수도 안해줄수있음
// 강제로 인라인을 적용시키려면 __forceinline키워드 사용
// 헤더파일에서만 사용

int main()
{

	return 0;
}