//
// 충돌
// 충돌시 어떤 레이어와 충돌중인지 기록
// ㄴ enter, stay, exit 상태구분
// 콜리전 매니저의 static std::map<UINT64, bool> mCollisionMap;으로
// 두 레이어간의 충돌여부를 체크
// 
// Collider 클래스에 id만듬
// ㄴ 생성자에서 충돌체가 생성될때마다 ++연산하여 겹치지 않게함 UINT
// 
// 씬변경마다 매트릭스정보(충돌 레이어)가 바뀌어야한다.
// ㄴ 변경후 충돌체크가 안됨 확인요망
// ㄴ onEnter함수에 CollisionManager::SetLayer체크
// 
// 콜백함수로 충돌함수들을 구현하여 충돌시 다른 충돌체의 오브젝트에
// 접근가능
// 
// 회전을 위한 수학
// ㄴ 각도를 구하는 방법은 여러가지있음
// ㄴ 디그리(360)각도와 원주율
// 
// 원주율(파이)을 이용하여 원의 둘레 길이구함
// 원의 둘레 = 2파이 * 반지름
// 2파이 = 360도 , 파이 = 180도 , 파이 /2 = 90도
// ㄴ 원의 둘레에대한 비율로 각을 표현하는 방법- > 라디안측정법
// 1 라디안 = 1도 * 180/ 파이
// 
// 삼각함수를 가지고 회전
// sin, cos, tan
// (x, y)
// ㄴ y/ 반지름 = sinθ
// ㄴ x/ 반지름 = cosθ
// ㄴ (x,y) = (cosθ * 반지름, sinθ * 반지름)
// cosf(라디안) 코사인 함수
// sinf() 사인 함수
// 
// 삼각함수 그래프
// 
// 벡터
// ㄴ 방향을 표현할수있는 점
// ㄴ 4차원벡터 (x, y, z, w) - 동차좌표계
// ㄴ 마지막 w가 1이면 점을표현하는 벡터, 0이면 방향만 가리키는 벡터
// 
// 벡터를 가지고 회전을 해야할때
// sqrtf() - 루트를 구해주는 함수
// 타깃의 위치벡터와 자신의 위치 벡터를 빼주면 타깃의 벡터를 구할수있다.
// 노멀라이즈 - 방향은 유지한채 길이가 1인 벡터를 만드는 과정
// ㄴ 길이를 먼저 구함 - 루트 a제곱 + b제곱
// ㄴ 타깃벡터방향만 넣어줌
// tan로 각도 계산
// ㄴ tanθ로 빗변의 비율을 알수있다.
// ㄴ 일반 탄젠트 함수는 -90도에서 90도사이의 각도밖에 구할수없다.
// ㄴ atan2()함수 사용
// 
// 벡터의 내적
// ㄴ 보통 내적은 벡터의 방향이 얼마나 일치하는지를 알기 위한 용도로 쓰인다
// ㄴ 두 벡터의 각 성분끼리의 곱의 합산 ( x* x + y * y)
// ㄴ 위의 결과는 cos 세타가 나옴
// ㄴ cos의 역함수 acos함수에 cos 세타를 넣어주면 세타(각도)를 반환
// 
// 
// 
//